// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CLIENT_MYCLIENT_SAMPLE_H_
#define FLATBUFFERS_GENERATED_CLIENT_MYCLIENT_SAMPLE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace MyClient {
namespace Sample {

struct Person;
struct PersonBuilder;

struct Group;
struct GroupBuilder;

struct PersonGroup;
struct PersonGroupBuilder;

struct Person FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PersonBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_AGE = 6,
    VT_WEIGHT = 8,
    VT_IS_MALE = 10
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  int32_t age() const {
    return GetField<int32_t>(VT_AGE, 0);
  }
  float weight() const {
    return GetField<float>(VT_WEIGHT, 0.0f);
  }
  bool is_male() const {
    return GetField<uint8_t>(VT_IS_MALE, 1) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int32_t>(verifier, VT_AGE, 4) &&
           VerifyField<float>(verifier, VT_WEIGHT, 4) &&
           VerifyField<uint8_t>(verifier, VT_IS_MALE, 1) &&
           verifier.EndTable();
  }
};

struct PersonBuilder {
  typedef Person Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Person::VT_NAME, name);
  }
  void add_age(int32_t age) {
    fbb_.AddElement<int32_t>(Person::VT_AGE, age, 0);
  }
  void add_weight(float weight) {
    fbb_.AddElement<float>(Person::VT_WEIGHT, weight, 0.0f);
  }
  void add_is_male(bool is_male) {
    fbb_.AddElement<uint8_t>(Person::VT_IS_MALE, static_cast<uint8_t>(is_male), 1);
  }
  explicit PersonBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Person> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Person>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Person> CreatePerson(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    int32_t age = 0,
    float weight = 0.0f,
    bool is_male = true) {
  PersonBuilder builder_(_fbb);
  builder_.add_weight(weight);
  builder_.add_age(age);
  builder_.add_name(name);
  builder_.add_is_male(is_male);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Person> CreatePersonDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    int32_t age = 0,
    float weight = 0.0f,
    bool is_male = true) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return MyClient::Sample::CreatePerson(
      _fbb,
      name__,
      age,
      weight,
      is_male);
}

struct Group FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GroupBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_AVG_AGE = 6,
    VT_AVG_WEIGHT = 8,
    VT_NAMES_LIST = 10
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  float avg_age() const {
    return GetField<float>(VT_AVG_AGE, 0.0f);
  }
  float avg_weight() const {
    return GetField<float>(VT_AVG_WEIGHT, 0.0f);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *names_list() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_NAMES_LIST);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<float>(verifier, VT_AVG_AGE, 4) &&
           VerifyField<float>(verifier, VT_AVG_WEIGHT, 4) &&
           VerifyOffset(verifier, VT_NAMES_LIST) &&
           verifier.VerifyVector(names_list()) &&
           verifier.VerifyVectorOfStrings(names_list()) &&
           verifier.EndTable();
  }
};

struct GroupBuilder {
  typedef Group Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Group::VT_NAME, name);
  }
  void add_avg_age(float avg_age) {
    fbb_.AddElement<float>(Group::VT_AVG_AGE, avg_age, 0.0f);
  }
  void add_avg_weight(float avg_weight) {
    fbb_.AddElement<float>(Group::VT_AVG_WEIGHT, avg_weight, 0.0f);
  }
  void add_names_list(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> names_list) {
    fbb_.AddOffset(Group::VT_NAMES_LIST, names_list);
  }
  explicit GroupBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Group> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Group>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Group> CreateGroup(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    float avg_age = 0.0f,
    float avg_weight = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> names_list = 0) {
  GroupBuilder builder_(_fbb);
  builder_.add_names_list(names_list);
  builder_.add_avg_weight(avg_weight);
  builder_.add_avg_age(avg_age);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Group> CreateGroupDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    float avg_age = 0.0f,
    float avg_weight = 0.0f,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *names_list = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto names_list__ = names_list ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*names_list) : 0;
  return MyClient::Sample::CreateGroup(
      _fbb,
      name__,
      avg_age,
      avg_weight,
      names_list__);
}

struct PersonGroup FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PersonGroupBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PERSON_DATA = 4,
    VT_GROUP_DATA = 6
  };
  const MyClient::Sample::Person *person_data() const {
    return GetPointer<const MyClient::Sample::Person *>(VT_PERSON_DATA);
  }
  const MyClient::Sample::Group *group_data() const {
    return GetPointer<const MyClient::Sample::Group *>(VT_GROUP_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PERSON_DATA) &&
           verifier.VerifyTable(person_data()) &&
           VerifyOffset(verifier, VT_GROUP_DATA) &&
           verifier.VerifyTable(group_data()) &&
           verifier.EndTable();
  }
};

struct PersonGroupBuilder {
  typedef PersonGroup Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_person_data(::flatbuffers::Offset<MyClient::Sample::Person> person_data) {
    fbb_.AddOffset(PersonGroup::VT_PERSON_DATA, person_data);
  }
  void add_group_data(::flatbuffers::Offset<MyClient::Sample::Group> group_data) {
    fbb_.AddOffset(PersonGroup::VT_GROUP_DATA, group_data);
  }
  explicit PersonGroupBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PersonGroup> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PersonGroup>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PersonGroup> CreatePersonGroup(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<MyClient::Sample::Person> person_data = 0,
    ::flatbuffers::Offset<MyClient::Sample::Group> group_data = 0) {
  PersonGroupBuilder builder_(_fbb);
  builder_.add_group_data(group_data);
  builder_.add_person_data(person_data);
  return builder_.Finish();
}

inline const MyClient::Sample::Person *GetPerson(const void *buf) {
  return ::flatbuffers::GetRoot<MyClient::Sample::Person>(buf);
}

inline const MyClient::Sample::Person *GetSizePrefixedPerson(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<MyClient::Sample::Person>(buf);
}

inline bool VerifyPersonBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MyClient::Sample::Person>(nullptr);
}

inline bool VerifySizePrefixedPersonBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MyClient::Sample::Person>(nullptr);
}

inline void FinishPersonBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MyClient::Sample::Person> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPersonBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MyClient::Sample::Person> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Sample
}  // namespace MyClient

#endif  // FLATBUFFERS_GENERATED_CLIENT_MYCLIENT_SAMPLE_H_
