# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Sample

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PersonGroup(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PersonGroup()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPersonGroup(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PersonGroup
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PersonGroup
    def PersonData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MyClient.Sample.Person import Person
            obj = Person()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PersonGroup
    def GroupData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MyClient.Sample.Group import Group
            obj = Group()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def PersonGroupStart(builder):
    builder.StartObject(2)

def Start(builder):
    PersonGroupStart(builder)

def PersonGroupAddPersonData(builder, personData):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(personData), 0)

def AddPersonData(builder, personData):
    PersonGroupAddPersonData(builder, personData)

def PersonGroupAddGroupData(builder, groupData):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(groupData), 0)

def AddGroupData(builder, groupData):
    PersonGroupAddGroupData(builder, groupData)

def PersonGroupEnd(builder):
    return builder.EndObject()

def End(builder):
    return PersonGroupEnd(builder)
